// <auto-generated />
using System;
using CG.Blue.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CG.Blue.Data.SqlServer.Migrations
{
    [DbContext(typeof(BlueDbContext))]
    [Migration("20230113163912_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CG.Blue.Data.Entities.FileTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasMaxLength(260)
                        .IsUnicode(false)
                        .HasColumnType("varchar(260)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MimeTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MimeTypeId");

                    b.HasIndex(new[] { "Extension" }, "IX_FileTypes");

                    b.ToTable("FileTypes", "Blue");
                });

            modelBuilder.Entity("CG.Blue.Data.Entities.MimeTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("SubType")
                        .IsRequired()
                        .HasMaxLength(127)
                        .IsUnicode(false)
                        .HasColumnType("varchar(127)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(127)
                        .IsUnicode(false)
                        .HasColumnType("varchar(127)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Type", "SubType" }, "IX_MimeTypes")
                        .IsUnique();

                    b.ToTable("MimeTypes", "Blue");
                });

            modelBuilder.Entity("CG.Blue.Data.Entities.FileTypeEntity", b =>
                {
                    b.HasOne("CG.Blue.Data.Entities.MimeTypeEntity", "MimeType")
                        .WithMany("FileTypes")
                        .HasForeignKey("MimeTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("MimeType");
                });

            modelBuilder.Entity("CG.Blue.Data.Entities.MimeTypeEntity", b =>
                {
                    b.Navigation("FileTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
